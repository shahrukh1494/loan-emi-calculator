{"version":3,"sources":["components/Header.js","components/CalculatorForm.js","components/ShowMonthly.js","components/Result.js","components/Linkage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","CalculatorForm","useState","principal","setPrincipal","interest","setInterest","emiPeriodType","setEmiPeriodType","timePeriod","setTimePeriod","interestAmount","setInterestAmount","valid","setValid","to","pathname","state","type","value","onChange","e","target","min","max","onClick","preventDefault","p","Number","r","t","isNaN","alert","toFixed","calculate","ShowMonthly","payable","time","month","Date","getMonth","monthName","Math","floor","emiMonths","i","push","map","months","random","Result","history","useHistory","window","onpopstate","location","useLocation","Linkage","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f911c02.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"header\">Loan EMI Calculator</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst CalculatorForm = () => {\r\n  const [principal, setPrincipal] = useState(\"\");\r\n  const [interest, setInterest] = useState(\"\");\r\n  const [emiPeriodType, setEmiPeriodType] = useState(\"year\");\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [interestAmount, setInterestAmount] = useState(\"\");\r\n  const [valid, setValid] = useState(false);\r\n\r\n  if (valid) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/result\",\r\n          state: {\r\n            principal,\r\n            interest,\r\n            emiPeriodType,\r\n            timePeriod,\r\n            interestAmount,\r\n            valid,\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const reset = () => {\r\n    setPrincipal(\"\");\r\n    setInterest(\"\");\r\n    setEmiPeriodType(\"year\");\r\n    setTimePeriod(\"\");\r\n  };\r\n\r\n  //const calculate = (principal, interest, emiPeriodType, timePeriod) => {\r\n  const calculate = () => {\r\n    const p = Number(principal);\r\n    const r = Number(interest) / 100;\r\n    const t = Number(timePeriod);\r\n\r\n    //validate if input fields are numbers\r\n    if (isNaN(p) || isNaN(r) || isNaN(t)) {\r\n      alert(\"Invalid Input! Please enter numbers only\");\r\n      return;\r\n    }\r\n    //validate if input is in positive numbers only\r\n    if (p <= 0 || r <= 0 || t <= 0) {\r\n      alert(\"Invalid Input! Please enter positive numbers!\");\r\n      return;\r\n    }\r\n\r\n    //calculate and show if in months\r\n    if (emiPeriodType === \"month\") {\r\n      const simpleInterest = (p * r * t) / 12;\r\n      setInterestAmount(simpleInterest.toFixed(3));\r\n      setValid(true);\r\n      return;\r\n    }\r\n    //calculate and show if in days\r\n    if (emiPeriodType === \"day\") {\r\n      const simpleInterest = (p * r * t) / 365;\r\n      setInterestAmount(simpleInterest.toFixed(3));\r\n      setValid(true);\r\n      return;\r\n    }\r\n    //calculate and show if in years\r\n    const simpleInterest = p * r * t;\r\n    setInterestAmount(simpleInterest.toFixed(3));\r\n    setValid(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"add-form\">\r\n        <div className=\"form-control\">\r\n          <label>Enter Loan Amount </label>\r\n          {\r\n            //<input value=\"&#8377;\" disabled />\r\n          }\r\n          <input\r\n            type=\"text\"\r\n            value={principal}\r\n            onChange={(e) => setPrincipal(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label>Enter Interest Rate </label>\r\n          <div className=\"slidecontainer\">\r\n            1\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"100\"\r\n              value={interest}\r\n              onChange={(e) => setInterest(e.target.value)}\r\n              className=\"slider\"\r\n            />\r\n            100\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            value={interest}\r\n            onChange={(e) => setInterest(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-control dropdown\">\r\n          <label>Enter total time period in </label>\r\n          <select\r\n            value={emiPeriodType}\r\n            onChange={(e) => setEmiPeriodType(e.target.value)}\r\n          >\r\n            <option value=\"year\">Years</option>\r\n            <option value=\"month\">Months</option>\r\n            <option value=\"day\">Days</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label>Enter total time period </label>\r\n          <input\r\n            type=\"text\"\r\n            value={timePeriod}\r\n            onChange={(e) => setTimePeriod(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            calculate();\r\n          }}\r\n          className=\"btn\"\r\n        >\r\n          Calculate\r\n        </button>\r\n\r\n        <button\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            reset();\r\n          }}\r\n          className=\"btn\"\r\n        >\r\n          Reset\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorForm;\r\n","import React from \"react\";\r\n\r\nconst ShowMonthly = ({ payable, type, time }) => {\r\n  let date = new Date();\r\n  let month = date.getMonth();\r\n  let monthName = \"\";\r\n\r\n  let monthEvaluator = () => {\r\n    if (month === 0) {\r\n      monthName = \"January\";\r\n    } else if (month === 1) {\r\n      monthName = \"February\";\r\n    } else if (month === 2) {\r\n      monthName = \"March\";\r\n    } else if (month === 3) {\r\n      monthName = \"April\";\r\n    } else if (month === 4) {\r\n      monthName = \"May\";\r\n    } else if (month === 5) {\r\n      monthName = \"June\";\r\n    } else if (month === 6) {\r\n      monthName = \"July\";\r\n    } else if (month === 7) {\r\n      monthName = \"August\";\r\n    } else if (month === 8) {\r\n      monthName = \"September\";\r\n    } else if (month === 9) {\r\n      monthName = \"October\";\r\n    } else if (month === 10) {\r\n      monthName = \"November\";\r\n    } else if (month === 11) {\r\n      monthName = \"December\";\r\n    } else {\r\n      monthName = \"\";\r\n    }\r\n  };\r\n\r\n  if (type === \"year\") {\r\n    time = time * 12;\r\n  }\r\n  if (type === \"day\") {\r\n    time = Math.floor(time / 30);\r\n  }\r\n\r\n  const emiMonths = [];\r\n\r\n  for (let i = 0; i < time; i++) {\r\n    month += 1;\r\n    if (month >= 12) {\r\n      month = month % 12;\r\n    }\r\n    monthEvaluator();\r\n    emiMonths.push(monthName);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"result\">\r\n        Monthly Payment : &#8377; {(Number(payable) / Number(time)).toFixed(3)}{\" \"}\r\n        per month in installments as :\r\n      </div>\r\n      {emiMonths.map((months) => (\r\n        <div key={Math.random() * 1000} className=\"result\">\r\n          <div className=\"result-months\">{months}</div>\r\n          <div className=\"result-amount\">\r\n            &#8377; {(Number(payable) / Number(time)).toFixed(3)}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowMonthly;\r\n","import React from \"react\";\r\nimport { useLocation, Link, useHistory } from \"react-router-dom\";\r\nimport ShowMonthly from \"./ShowMonthly\";\r\n\r\nconst Result = () => {\r\n  const history = useHistory();\r\n  window.onpopstate = (e) => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const location = useLocation();\r\n  const payable =\r\n    Number(location.state.principal) + Number(location.state.interestAmount);\r\n  return (\r\n    <>\r\n      <Link to=\"/\">Calculate Again</Link>\r\n      <div className=\"result\">\r\n        <div className=\"result-data\">\r\n          Total Loan Amount : &#8377; {location.state.principal}\r\n        </div>\r\n        <div className=\"result-data\">\r\n          Interest Rate : {location.state.interest} % per annum\r\n        </div>\r\n        <div className=\"result-data\">\r\n          Total Loan Time Period : {location.state.timePeriod}{\" \"}\r\n          {location.state.emiPeriodType}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"result\">\r\n        <div className=\"result-data\">\r\n          Total payable Amount : &#8377; {payable}\r\n        </div>\r\n        <div className=\"result-data\">\r\n          Total Interest Amount : &#8377; {location.state.interestAmount}\r\n        </div>\r\n      </div>\r\n\r\n      <ShowMonthly\r\n        payable={payable}\r\n        type={location.state.emiPeriodType}\r\n        time={location.state.timePeriod}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport CalculatorForm from \"./CalculatorForm\";\r\nimport Result from \"./Result\";\r\n\r\nconst Linkage = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Route exact path=\"/\">\r\n          <CalculatorForm />\r\n        </Route>\r\n        <Route path=\"/result\">\r\n          <Result />\r\n        </Route>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Linkage;\r\n","import Header from \"./components/Header\";\nimport Linkage from \"./components/Linkage\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Linkage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}